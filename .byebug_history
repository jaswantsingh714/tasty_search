c
query
c
next
query = query.split(',') 
c
query = query.!split(',')
c
query.split(',')
query.!split(',')
c
next
query.split(',')
query
c
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(query_results_count).map{|a| a[0]}
ids = hash.sort_by{|k,v| [-v[0],-v[1]]}.first(query_results_count)
c
next
c
hash
query_results_count
c
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(20)
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(query_size)
c
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(20)
c
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(20)
hash
next
c
hash
next
c
hash
next
c
hash.sort_by{|k,v| [-v[0],-v[1]]}
hash
next
c
Rails.cache.read("love")
rails.cache.read("love")
tokens
hash.sort_by{|k,v| [-v[0],-v[1]]}.first(20)
hash.sort_by{|k,v| [-v[0],-v[1]]}
hash
hash.sort_by{|k,v| [-v[0],-v[1]]}
nexthash
c
next
hash
next
exit
next
ids
next
exit
word = ReviewHelper.trim_word(word)
word
exit
c
exit
Rails.cache.read("word")
review
word
exit-p
word
exit-p
t.size
t.length
t = [1,2,2,3]
c
self.text.include?("food")
self.text.include?("loveo")
self.text.include?("love")
score/(params[:tokens].length)
c
params[:tokens] = ["hi","bye","love","food"]
self
c
exit
c
exit
score1 == 3.0
score1 == 4.0
score1 == 5.0
score1 == 2.0
score1 == 1.0
:score
score1
text.id2name
text.to_s
Symbol.all_symbols[1,20]
Symbol.all_symbols.size
$g.object_id
$g = text
puts s
s = text
puts s
s
s = :text
score1.to_s.val
score1.to_s
score.to_s
score.attributes
score1.value
score1.val
score1
exit
score
text
exit
review.id
review
Review
Review.id
Review
Review.connection
review
exit
text
text.length
text[0]
text.first
summary
text
params
c
Review.order(Review.scores(params,:text,:summary)).limit(50)
params[:tokens]
params
params[:tokens].uniq!
params[:tokens].uniq
params[:tokens].uniq!
params[:tokens]
params
exit-program
disable-pry
!!!
c
review.save
review.attributes
c
review.save
review.attributes
